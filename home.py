import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.decomposition import PCA
from sklearn.cluster import KMeans
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import confusion_matrix, classification_report

# --- Page Configuration ---
st.set_page_config(
    page_title="Mouse Viral Infection Study",
    page_icon="ü¶†",
    layout="wide"
)

# --- Sidebar Navigation ---
st.sidebar.title("‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å")
page = st.sidebar.radio(
    "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏ô‡πâ‡∏≤:",
    ["Overview", "Expression Trends", "PCA & Clustering", "Infection Prediction", "Download Data", "About"]
)

# --- Load Data with Caching ---
@st.cache_data
def load_mouse_data(path):
    df = pd.read_csv(path)
    # Rename existing label column if needed
    if 'Virus Present' in df.columns:
        df.rename(columns={'Virus Present': 'infected'}, inplace=True)
    return df

df = load_mouse_data("./data/mouse.csv")

# Identify numeric columns
numeric_cols = df.select_dtypes(include=[np.number]).columns.tolist()
# Ensure 'infected' is numeric
if 'infected' in df.columns:
    df['infected'] = df['infected'].astype(int)

# --- Overview Page ---
st.image('./img/1.jpg'
if page == "Overview":
    st.title("‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Mouse Viral Infection")
    st.markdown(
        f"- ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: **{df.shape[0]}** ‡πÅ‡∏ñ‡∏ß  \n"
        f"- ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå: **{df.shape[1]}**"
    )
    st.subheader("‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    st.dataframe(df.head(5), use_container_width=True)
    st.subheader("‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏ä‡∏¥‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç")
    st.dataframe(df[numeric_cols].describe(), use_container_width=True)
    st.subheader("Missing Values ‡∏ï‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå")
    st.bar_chart(df.isnull().sum())

# --- Expression Trends Page ---
elif page == "Expression Trends":
    st.title("‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡∏≠‡∏á‡∏¢‡∏µ‡∏ô")
    selected_cols = st.multiselect(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏ä‡∏¥‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç:", numeric_cols, default=numeric_cols[:3]
    )
    if selected_cols:
        st.line_chart(df[selected_cols])
    else:
        st.info("‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏ï‡∏±‡∏ß")

# --- PCA & Clustering Page ---
elif page == "PCA & Clustering":
    st.title("PCA & K-Means Clustering")
    data_numeric = df[numeric_cols].fillna(0)
    # PCA
    pca = PCA(n_components=2)
    pcs = pca.fit_transform(data_numeric)
    pca_df = pd.DataFrame(pcs, columns=['PC1', 'PC2'])
    # K-Means
    n_clusters = st.slider("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏•‡∏±‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå:", 2, 8, 4)
    kmeans = KMeans(n_clusters=n_clusters, random_state=42)
    pca_df['Cluster'] = kmeans.fit_predict(data_numeric).astype(str)
    fig, ax = plt.subplots()
    for cl in sorted(pca_df['Cluster'].unique()):
        subset = pca_df[pca_df['Cluster']==cl]
        ax.scatter(subset['PC1'], subset['PC2'], label=f"Cluster {cl}", alpha=0.6)
    ax.set_xlabel('PC1')
    ax.set_ylabel('PC2')
    ax.legend()
    st.pyplot(fig)
    st.markdown(
        f"Explained Variance: PC1={pca.explained_variance_ratio_[0]:.2f}, PC2={pca.explained_variance_ratio_[1]:.2f}"
    )

# --- Infection Prediction Page ---
elif page == "Infection Prediction":
    st.title("‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡πÑ‡∏ß‡∏£‡∏±‡∏™")
    st.markdown("‡πÉ‡∏ä‡πâ Logistic Regression ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ß‡πà‡∏≤‡∏´‡∏ô‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ï‡∏¥‡∏î‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏ä‡∏¥‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç")
    if 'infected' not in df.columns:
        st.error("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 'infected' ‡πÉ‡∏ô‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• label ‡∏Å‡πà‡∏≠‡∏ô")
    else:
        # Prepare data
        X = df[numeric_cols].drop(columns=['infected'], errors='ignore').fillna(0)
        y = df['infected']
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)
        # Train model
        model = LogisticRegression(max_iter=1000)
        model.fit(X_train, y_train)
        # Evaluation
        y_pred = model.predict(X_test)
        st.subheader("Performance Metrics")
        cm = confusion_matrix(y_test, y_pred)
        st.write("Confusion Matrix:")
        st.write(cm)
        st.write("Classification Report:")
        st.text(classification_report(y_test, y_pred))
        # User input for prediction
        st.subheader("‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà")
        user_inputs = {}
        cols_container = st.container()
        for col in X.columns:
            user_inputs[col] = cols_container.number_input(
                f"{col}",
                float(df[col].min()), float(df[col].max()), float(df[col].median())
            )
        if st.button("üîç ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•‡∏ï‡∏¥‡∏î‡πÄ‡∏ä‡∏∑‡πâ‡∏≠"):
            input_df = pd.DataFrame([user_inputs])
            pred = model.predict(input_df)[0]
            proba = model.predict_proba(input_df)[0][1]
            label = '‡∏ï‡∏¥‡∏î‡πÄ‡∏ä‡∏∑‡πâ‡∏≠' if pred==1 else '‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î‡πÄ‡∏ä‡∏∑‡πâ‡∏≠'
            st.success(f"‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢: **{label}** (Probability of infection: {proba:.2%})")

# --- Download Data Page ---
elif page == "Download Data":
    st.title("‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    csv = df.to_csv(index=False).encode('utf-8')
    st.download_button(
        label="üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î CSV",
        data=csv,
        file_name='mouse_viral_infection.csv',
        mime='text/csv'
    )

# --- About Page ---
else:
    st.title("‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô")
    st.markdown(
        """
        **Mouse Viral Infection Study App**  
        - ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏î‡∏¢: Your Name  
        - ‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: mouse.csv  
        - ‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ: Streamlit, pandas, numpy, scikit-learn, matplotlib  
        - ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô: 1.3.1
        """
    )

# --- Footer ---
st.sidebar.markdown("---")
st.sidebar.write("Developed with üíô by Your Name")

